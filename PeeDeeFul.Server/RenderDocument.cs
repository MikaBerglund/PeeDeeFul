using System;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.Azure.WebJobs.Host;
using MigraDoc.DocumentObjectModel.IO;
using MigraDoc.Rendering;
using PdfSharp.Pdf;

namespace PeeDeeFul.Server
{
    public static class RenderDocument
    {
        [FunctionName("RenderDocumentDdl")]
        public static async Task<HttpResponseMessage> Run([HttpTrigger(AuthorizationLevel.Function, "POST", Route = "Documents/RenderDdl")]HttpRequestMessage req, TraceWriter log)
        {
            PdfDocument doc = null;
            PdfDocumentRenderer renderer = null;
            string ddl = await req.Content.ReadAsStringAsync();

            //----------------------------------------------------------------------------------------------------------
            // Parse the DDL and render it to a PDF document object.
            await Task.Run(() =>
            {
                renderer = new PdfDocumentRenderer(true)
                {
                    Document = DdlReader.DocumentFromString(ddl)
                };
            });

            await Task.Run(() =>
            {
                renderer.RenderDocument();
                doc = renderer.PdfDocument;
            });
            //----------------------------------------------------------------------------------------------------------


            //----------------------------------------------------------------------------------------------------------
            // Save the rendered document to a byte array.
            byte[] buffer = null;
            using (var strm = new MemoryStream())
            {
                doc.Save(strm, false);
                strm.Position = 0;

                buffer = new byte[strm.Length];
                await strm.ReadAsync(buffer, 0, buffer.Length);
            }
            //----------------------------------------------------------------------------------------------------------

            var title = doc?.Info?.Title;
            if (string.IsNullOrEmpty(title)) title = "document";

            title = System.Web.HttpUtility.UrlEncode(title);

            //----------------------------------------------------------------------------------------------------------
            // Construct the response from the generated byte array.

            var response = new HttpResponseMessage();

            try
            {
                response.Content = new ByteArrayContent(buffer);
                response.Content.Headers.ContentDisposition = ContentDispositionHeaderValue.Parse($"attachment; filename={title}.pdf");
                response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/pdf");
            }
            catch (Exception ex)
            {
                var msg = ex.Message;
            }
            //----------------------------------------------------------------------------------------------------------

            return response;
        }
    }
}
